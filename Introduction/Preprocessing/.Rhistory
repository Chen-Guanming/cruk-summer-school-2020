clustering_distance_cols = "correlation",
color = palette,
breaks = colors,
#        annotation_col = annotation_col,
#         annotation_colors = ann_colors,
#        filename = "plots/heatmapBCL6_targets.pdf",
#       cellwidth = 15,
#       cellheight = 1.5,
#       fontsize_row = 4.5,
show_rownames = F,
show_colnames = F)
View(metadata.endemic)
metadata.endemic <- metadata %>%
dplyr::filter(grepl("Endemic", Clinical_variant))
counts.endemic <- blood2019.counts[,metadata.endemic$biospecimen_id]
rownames(counts.endemic) <- blood2019.counts$gene
# Basic DESeq2
dds <- DESeqDataSetFromMatrix(counts.endemic,
metadata.endemic,
~  + Tissue_source_site + DDX3X)
dds$DDX3X <- relevel(dds$DDX3X, ref = "WT")
dds <- DESeq(dds)
vst.endemic <- assay(vst(dds))
resultsNames(dds)
res <- results(dds, name = "DDX3X_MUT_vs_WT")
resLFC <- lfcShrink(dds, coef="DDX3X_MUT_vs_WT", type="apeglm")
res.tab <- resLFC %>% as.data.frame() %>%
rownames_to_column("external_gene_name") %>%
na.omit() %>%
left_join(entrezIDs.tab) %>%
mutate(status = case_when(log2FoldChange > 0.5 & padj < 0.05 ~ "mRNA_up",
log2FoldChange < -0.5 & padj < 0.05 ~ "mRNA_down",
TRUE ~ "stable"))
res.endemic <- res.tab
View(res.endemic)
# PCA
res.pca <- prcomp(t(vst.endemic), scale. = T)
# PCA
vst.filtered <- vst[order(rowVars(vst.endemic), decreasing = T),][1:1000,]
res.pca <- prcomp(t(vst.filtered), scale. = T)
pca.tab <- res.pca$x %>%
as.data.frame() %>%
rownames_to_column("biospecimen_id") %>%
left_join(metadata)
# DDX3X
ggplot(pca.tab, aes(x =PC1, y = PC2, color = DDX3X)) +
geom_point() +
nature_point() +
scale_colour_manual(values = divergingPal[c(2,12)])
# DDX3X
ggplot(pca.tab, aes(x =PC1, y = PC2, color = Cohort)) +
geom_point() +
nature_point() +
scale_colour_manual(values = divergingPal[c(2,12)])
# DDX3X
ggplot(pca.tab, aes(x =PC1, y = PC2, color = EBV_status)) +
geom_point() +
nature_point() +
scale_colour_manual(values = divergingPal[c(2,12)])
# DDX3X
ggplot(pca.tab, aes(x =PC1, y = PC2, color = Sex)) +
geom_point() +
nature_point() +
scale_colour_manual(values = divergingPal[c(2,12)])
# DDX3X
ggplot(pca.tab, aes(x =PC1, y = PC2, color = `IgG-MYC_translocation`)) +
geom_point() +
nature_point() +
scale_colour_manual(values = divergingPal[c(2,12)])
# DDX3X
ggplot(pca.tab, aes(x =PC1, y = PC2, color = `IG-MYC_translocation`)) +
geom_point() +
nature_point() +
scale_colour_manual(values = divergingPal[c(2,12)])
ggplot(pca.tab, aes(x =PC1, y = PC2, color = `IG-MYC_translocation`)) +
geom_point() +
nature_point()
metadata.endemic <- metadata %>%
dplyr::filter(grepl("Endemic", Clinical_variant))
counts.endemic <- blood2019.counts[,metadata.endemic$biospecimen_id]
rownames(counts.endemic) <- blood2019.counts$gene
# Basic DESeq2
dds <- DESeqDataSetFromMatrix(counts.endemic,
metadata.endemic,
~  + `IG-MYC_translocation` + DDX3X)
metadata.endemic <- metadata %>%
dplyr::filter(grepl("Endemic", Clinical_variant))
counts.endemic <- blood2019.counts[,metadata.endemic$biospecimen_id]
rownames(counts.endemic) <- blood2019.counts$gene
# Basic DESeq2
dds <- DESeqDataSetFromMatrix(counts.endemic,
metadata.endemic,
~  `IG-MYC_translocation` + DDX3X)
colnames(metadata.endemic)
colnames(metadata) <- gsub("-", "_", colnames(metadata))
metadata.endemic <- metadata %>%
dplyr::filter(grepl("Endemic", Clinical_variant))
counts.endemic <- blood2019.counts[,metadata.endemic$biospecimen_id]
rownames(counts.endemic) <- blood2019.counts$gene
# Basic DESeq2
dds <- DESeqDataSetFromMatrix(counts.endemic,
metadata.endemic,
~  IG_MYC_translocation + DDX3X)
dds$DDX3X <- relevel(dds$DDX3X, ref = "WT")
dds <- DESeq(dds)
vst.endemic <- assay(vst(dds))
resultsNames(dds)
res <- results(dds, name = "DDX3X_MUT_vs_WT")
resLFC <- lfcShrink(dds, coef="DDX3X_MUT_vs_WT", type="apeglm")
res.tab <- resLFC %>% as.data.frame() %>%
rownames_to_column("external_gene_name") %>%
na.omit() %>%
left_join(entrezIDs.tab) %>%
mutate(status = case_when(log2FoldChange > 0.5 & padj < 0.05 ~ "mRNA_up",
log2FoldChange < -0.5 & padj < 0.05 ~ "mRNA_down",
TRUE ~ "stable"))
res.endemic <- res.tab
View(res.endemic)
# DDX3X
ggplot(pca.tab, aes(x =PC1, y = PC2, color = Anatomic_site_classification)) +
geom_point() +
nature_point()
# DDX3X
ggplot(pca.tab, aes(x =PC1, y = PC2, color = DDX3X)) +
geom_point() +
nature_point()
metadata.endemic <- metadata %>%
dplyr::filter(grepl("Endemic", Clinical_variant))
counts.endemic <- blood2019.counts[,metadata.endemic$biospecimen_id]
rownames(counts.endemic) <- blood2019.counts$gene
# Basic DESeq2
dds <- DESeqDataSetFromMatrix(counts.endemic,
metadata.endemic,
~ DDX3X)
dds$DDX3X <- relevel(dds$DDX3X, ref = "WT")
dds <- DESeq(dds)
vst.endemic <- assay(vst(dds))
resultsNames(dds)
res <- results(dds, name = "DDX3X_MUT_vs_WT")
resLFC <- lfcShrink(dds, coef="DDX3X_MUT_vs_WT", type="apeglm")
res.tab <- resLFC %>% as.data.frame() %>%
rownames_to_column("external_gene_name") %>%
na.omit() %>%
left_join(entrezIDs.tab) %>%
mutate(status = case_when(log2FoldChange > 0.5 & padj < 0.05 ~ "mRNA_up",
log2FoldChange < -0.5 & padj < 0.05 ~ "mRNA_down",
TRUE ~ "stable"))
res.endemic <- res.tab
write_csv(res.tab, "results/DESeq2_DDX3X_MUTvsWT_endemicBL.csv")
#Heatmap
plot_df <- cbind(vst.sporatic[res.sporadic$external_gene_name[res.sporadic$status != "stable"],],
vst.endemic[res.sporadic$external_gene_name[res.sporadic$status != "stable"],])
View(metadata)
annotation_col <- metadata %>%
filter(biospecimen_id)
annotation_col <- metadata %>%
filter(biospecimen_id %in% colnames(plot_df))
View(annotation_col)
annotation_col <- metadata %>%
filter(biospecimen_id %in% colnames(plot_df)) %>%
arrange(match(colnames(plot_df)))
annotation_col <- annotation_col[match(colnames(plot_df), annotation_col$biospecimen_id),]
annotation_col <- metadata %>%
filter(biospecimen_id %in% colnames(plot_df)) %>%
dplyr::select(biospecimen_id, DDX3X, Sex)
annotation_col <- annotation_col[match(colnames(plot_df), annotation_col$biospecimen_id),]
annotation_col <- annotation_col %>%
column_to_rownames("biospecimen_id")
Var1 = divergingPal[c(12,2)]
names(Var1) = unique(annotation_col$DDX3X)
Var1
annotation_col <- metadata %>%
filter(biospecimen_id %in% colnames(plot_df)) %>%
dplyr::select(biospecimen_id, DDX3X, Sex, Clinical_variant)
annotation_col <- annotation_col[match(colnames(plot_df), annotation_col$biospecimen_id),]
annotation_col <- annotation_col %>%
column_to_rownames("biospecimen_id")
Var1 = divergingPal[c(12,2)]
names(Var1) = unique(annotation_col$DDX3X)
Var2 = divergingPal[c(12,10)]
names(Var2) = unique(annotation_col$Sex)
Var2
Var3 = divergingPal[c(7,8)]
Var3 = divergingPal[c(7,8)]
names(Var3) = unique(annotation_col$Clinical_variant)
ann_colors = list(group= Var1,
condition = Var2,
experiment = Var3)
ann_colors
colors <- c(-3, seq(-1.99,1.99,by=0.01),3)
palette <- rev(colorRampPalette(colors = c(divergingPal[2], "white", divergingPal[10]))(n = length(colors)))
pheatmap(plot_df,
cluster_cols = T,
cluster_rows = T,
cutree_rows = 2,
cutree_cols = 2,
scale = "row",
clustering_distance_rows = "correlation",
clustering_distance_cols = "correlation",
color = palette,
breaks = colors,
annotation_col = annotation_col,
annotation_colors = ann_colors,
#        filename = "plots/heatmapBCL6_targets.pdf",
#       cellwidth = 15,
#       cellheight = 1.5,
#       fontsize_row = 4.5,
show_rownames = F,
show_colnames = F)
ann_colors
annotation_col
plot_df
Var1 = divergingPal[c(12,2)]
names(Var1) = unique(annotation_col$DDX3X)
Var2 = divergingPal[c(12,10)]
names(Var2) = unique(annotation_col$Sex)
Var3 = divergingPal[c(7,8)]
names(Var3) = unique(annotation_col$Clinical_variant)
ann_colors = list(DDX3X= Var1,
Sex = Var2,
Clinical_variant = Var3)
colors <- c(-3, seq(-1.99,1.99,by=0.01),3)
palette <- rev(colorRampPalette(colors = c(divergingPal[2], "white", divergingPal[10]))(n = length(colors)))
pheatmap(plot_df,
cluster_cols = T,
cluster_rows = T,
cutree_rows = 2,
cutree_cols = 2,
scale = "row",
clustering_distance_rows = "correlation",
clustering_distance_cols = "correlation",
color = palette,
breaks = colors,
annotation_col = annotation_col,
annotation_colors = ann_colors,
#        filename = "plots/heatmapBCL6_targets.pdf",
#       cellwidth = 15,
#       cellheight = 1.5,
#       fontsize_row = 4.5,
show_rownames = F,
show_colnames = F)
plot_df <- cbind(vst.sporatic[res.sporadic$external_gene_name[res.sporadic$status != "stable"],])
annotation_col <- metadata %>%
filter(biospecimen_id %in% colnames(plot_df)) %>%
dplyr::select(biospecimen_id, DDX3X, Sex, Clinical_variant)
annotation_col <- annotation_col[match(colnames(plot_df), annotation_col$biospecimen_id),]
annotation_col <- annotation_col %>%
column_to_rownames("biospecimen_id")
Var1 = divergingPal[c(12,2)]
names(Var1) = unique(annotation_col$DDX3X)
Var2 = divergingPal[c(12,10)]
names(Var2) = unique(annotation_col$Sex)
Var3 = divergingPal[c(7,8)]
names(Var3) = unique(annotation_col$Clinical_variant)
ann_colors = list(DDX3X= Var1,
Sex = Var2,
Clinical_variant = Var3)
colors <- c(-3, seq(-1.99,1.99,by=0.01),3)
palette <- rev(colorRampPalette(colors = c(divergingPal[2], "white", divergingPal[10]))(n = length(colors)))
pheatmap(plot_df,
cluster_cols = T,
cluster_rows = T,
cutree_rows = 2,
cutree_cols = 2,
scale = "row",
clustering_distance_rows = "correlation",
clustering_distance_cols = "correlation",
color = palette,
breaks = colors,
annotation_col = annotation_col,
annotation_colors = ann_colors,
#        filename = "plots/heatmapBCL6_targets.pdf",
#       cellwidth = 15,
#       cellheight = 1.5,
#       fontsize_row = 4.5,
show_rownames = F,
show_colnames = F)
plot_df <- cbind(vst.endemic[res.sporadic$external_gene_name[res.sporadic$status != "stable"],])
annotation_col <- metadata %>%
filter(biospecimen_id %in% colnames(plot_df)) %>%
dplyr::select(biospecimen_id, DDX3X, Sex, Clinical_variant)
annotation_col <- annotation_col[match(colnames(plot_df), annotation_col$biospecimen_id),]
annotation_col <- annotation_col %>%
column_to_rownames("biospecimen_id")
Var1 = divergingPal[c(12,2)]
names(Var1) = unique(annotation_col$DDX3X)
Var2 = divergingPal[c(12,10)]
names(Var2) = unique(annotation_col$Sex)
Var3 = divergingPal[c(7,8)]
names(Var3) = unique(annotation_col$Clinical_variant)
ann_colors = list(DDX3X= Var1,
Sex = Var2,
Clinical_variant = Var3)
colors <- c(-3, seq(-1.99,1.99,by=0.01),3)
palette <- rev(colorRampPalette(colors = c(divergingPal[2], "white", divergingPal[10]))(n = length(colors)))
pheatmap(plot_df,
cluster_cols = T,
cluster_rows = T,
cutree_rows = 2,
cutree_cols = 2,
scale = "row",
clustering_distance_rows = "correlation",
clustering_distance_cols = "correlation",
color = palette,
breaks = colors,
annotation_col = annotation_col,
annotation_colors = ann_colors,
#        filename = "plots/heatmapBCL6_targets.pdf",
#       cellwidth = 15,
#       cellheight = 1.5,
#       fontsize_row = 4.5,
show_rownames = F,
show_colnames = F)
plot_df <- cbind(vst.sporatic[res.sporadic$external_gene_name[res.sporadic$status != "stable"],])
annotation_col <- metadata %>%
filter(biospecimen_id %in% colnames(plot_df)) %>%
dplyr::select(biospecimen_id, DDX3X, Sex, Clinical_variant)
annotation_col <- annotation_col[match(colnames(plot_df), annotation_col$biospecimen_id),]
annotation_col <- annotation_col %>%
column_to_rownames("biospecimen_id")
Var1 = divergingPal[c(12,2)]
names(Var1) = unique(annotation_col$DDX3X)
Var2 = divergingPal[c(12,10)]
names(Var2) = unique(annotation_col$Sex)
Var3 = divergingPal[c(7,8)]
names(Var3) = unique(annotation_col$Clinical_variant)
ann_colors = list(DDX3X= Var1,
Sex = Var2,
Clinical_variant = Var3)
colors <- c(-3, seq(-1.99,1.99,by=0.01),3)
palette <- rev(colorRampPalette(colors = c(divergingPal[2], "white", divergingPal[10]))(n = length(colors)))
pheatmap(plot_df,
cluster_cols = T,
cluster_rows = T,
cutree_rows = 2,
cutree_cols = 2,
scale = "row",
clustering_distance_rows = "correlation",
clustering_distance_cols = "correlation",
color = palette,
breaks = colors,
annotation_col = annotation_col,
annotation_colors = ann_colors,
#        filename = "plots/heatmapBCL6_targets.pdf",
#       cellwidth = 15,
#       cellheight = 1.5,
#       fontsize_row = 4.5,
show_rownames = F,
show_colnames = T)
devtools::create("basictemplate")
devtools::create("labookR")
write_csv("lnc.csv")
library(tidyverse)
library(knitr)
library(GenomicFeatures)
library(ggplot2)
library(ggpubr)
library(ORFik)
library(foreach)
library(doParallel)
GTFdb <- "../reference/gencode.v29.annotation.sqlite"
source("utilis.R")
txdb <- loadDb(GTFdb)
geneTxTable <- read_csv("data/biomart_ensembl_transcriptsGenesMapping.csv") %>%
dplyr::select(ensembl_gene_id, gene_biotype) %>%
distinct()
cds <- cdsBy(txdb,by = "tx", use.names = TRUE)
transcripts <- exonsBy(txdb, by = "tx", use.names = TRUE)
genes <-  exonsBy(txdb, by = "gene")
fiveUTRs <- fiveUTRsByTranscript(txdb,  use.names = TRUE)
threeUTRs <- threeUTRsByTranscript(txdb,  use.names = TRUE)
# Load a representative BAM file
ribobam <- readGAlignments("data/bams/Ribo_CHX_Primary_TuI1_MYC_merged_sorted.bam")
plastidOut <- read_delim("data/bams/plastid_p_offsets.txt", delim = "\t", comment = "#") %>%
dplyr::filter(length %in% 28:30)
offsets <- data.frame(fraction = plastidOut$length,
offsets_start = -1*plastidOut$p_offset,
stringsAsFactors = F)
psites <- shiftFootprints(ribobam, offsets)
TuI1.merged.scores.CDS <- read_csv("data/ORFscoring/CDSscoring_Primary_TuI1_MYC.csv") %>%
mutate(Group = "canonical ORF")
TuI1.merged.scores.ORF <- read_csv("data/ORFscoring/ORFscoring_Primary_TuI1_MYC.csv") %>%
mutate(Group = "non-canonical ORF") %>%
dplyr::filter(ORF_txID %in% names(ORF.nonCoding.grouped))
load("data/ORFs_GRanges_byExon_grouped.RData")
TuI1.merged.scores.CDS <- read_csv("data/ORFscoring/CDSscoring_Primary_TuI1_MYC.csv") %>%
mutate(Group = "canonical ORF")
TuI1.merged.scores.ORF <- read_csv("data/ORFscoring/ORFscoring_Primary_TuI1_MYC.csv") %>%
mutate(Group = "non-canonical ORF") %>%
dplyr::filter(ORF_txID %in% names(ORF.nonCoding.grouped))
TuI1.merged.scores.all <- TuI1.merged.scores.CDS %>%
full_join(TuI1.merged.scores.ORF)
select <- TuI1.merged.scores.all$Group == "CDS"
flossPlot <- ggplot() +
geom_point(aes(x = TuI1.merged.scores.all$countRFP[select],
y = TuI1.merged.scores.all$floss[select],
colour = TuI1.merged.scores.all$Group[select]), size = 0.5) +
geom_point(aes(x = TuI1.merged.scores.all$countRFP[!select],
y = TuI1.merged.scores.all$floss[!select],
colour = TuI1.merged.scores.all$Group[!select]), size = 0.5) +
scale_x_log10() +
nature_point() +
labs(x = "Number of ribosomal footprints", y = "FLOSS score", colour = "Type") +
scale_colour_manual(values = divergingPal[c(12,10)]) +
theme(legend.position = "bottom")
flossPlot
# LncRNAs scores
TuI1.merged.scores.lncRNA <- TuI1.merged.scores.ORF %>%
left_join(nc.atLeast2) %>%
mutate(ensembl_gene_id = splitvec(gene_id, "[.]", 1)) %>%
left_join(geneTxTable) %>%
dplyr::filter(gene_biotype == "lncRNA")
nc.atLeast2 <- read_csv("data/nonCanORFs_table.csv")
overlapWithCDS.tab <- read_csv("data/ORFsoverlapWithCDS.csv")
TuI1.merged.scores.CDS <- read_csv("data/ORFscoring/CDSscoring_Primary_TuI1_MYC.csv") %>%
mutate(Group = "canonical ORF")
TuI1.merged.scores.ORF <- read_csv("data/ORFscoring/ORFscoring_Primary_TuI1_MYC.csv") %>%
mutate(Group = "non-canonical ORF") %>%
dplyr::filter(ORF_txID %in% names(ORF.nonCoding.grouped))
TuI1.merged.scores.all <- TuI1.merged.scores.CDS %>%
full_join(TuI1.merged.scores.ORF)
select <- TuI1.merged.scores.all$Group == "CDS"
flossPlot <- ggplot() +
geom_point(aes(x = TuI1.merged.scores.all$countRFP[select],
y = TuI1.merged.scores.all$floss[select],
colour = TuI1.merged.scores.all$Group[select]), size = 0.5) +
geom_point(aes(x = TuI1.merged.scores.all$countRFP[!select],
y = TuI1.merged.scores.all$floss[!select],
colour = TuI1.merged.scores.all$Group[!select]), size = 0.5) +
scale_x_log10() +
nature_point() +
labs(x = "Number of ribosomal footprints", y = "FLOSS score", colour = "Type") +
scale_colour_manual(values = divergingPal[c(12,10)]) +
theme(legend.position = "bottom")
flossPlot
ggsave("pilotPlots/Representative_flossScore.pdf", flossPlot, width = 6, height = 5, useDingbats = F)
# LncRNAs scores
TuI1.merged.scores.lncRNA <- TuI1.merged.scores.ORF %>%
left_join(nc.atLeast2) %>%
mutate(ensembl_gene_id = splitvec(gene_id, "[.]", 1)) %>%
left_join(geneTxTable) %>%
dplyr::filter(gene_biotype == "lncRNA")
write_csv("lnc.csv")
write_csv(TuI1.merged.scores.lncRNA,"lnc.csv")
GRanges(TuI1.merged.scores.lncRNA)
gr <- GRanges(TuI1.merged.scores.lncRNA)
?export
export(gr, "lnc.bed", format = "BED")
rtracklayer::export(gr, "lnc.bed", format = "BED")
rtracklayer::export(ORF.nonCoding.grouped, "lnc.bed", format = "BED")
350/5
library(tidyverse)
library(knitr)
library(GenomicFeatures)
library(ggplot2)
library(ggpubr)
library(ORFik)
library(foreach)
library(doParallel)
GTFdb <- "../reference/gencode.v29.annotation.sqlite"
source("utilis.R")
txdb <- loadDb(GTFdb)
geneTxTable <- read_csv("data/biomart_ensembl_transcriptsGenesMapping.csv") %>%
dplyr::select(ensembl_gene_id, gene_biotype) %>%
distinct()
cds <- cdsBy(txdb,by = "tx", use.names = TRUE)
transcripts <- exonsBy(txdb, by = "tx", use.names = TRUE)
genes <-  exonsBy(txdb, by = "gene")
fiveUTRs <- fiveUTRsByTranscript(txdb,  use.names = TRUE)
threeUTRs <- threeUTRsByTranscript(txdb,  use.names = TRUE)
# Load a representative BAM file
ribobam <- readGAlignments("data/bams/Ribo_CHX_Primary_TuI1_MYC_merged_sorted.bam")
plastidOut <- read_delim("data/bams/plastid_p_offsets.txt", delim = "\t", comment = "#") %>%
dplyr::filter(length %in% 28:30)
offsets <- data.frame(fraction = plastidOut$length,
offsets_start = -1*plastidOut$p_offset,
stringsAsFactors = F)
psites <- shiftFootprints(ribobam, offsets)
8581 - 4347
View(ORF.coding.grouped)
View(nc.atLeast2)
12*3
36+8
sessionInfo()
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("rpx")
library(rpx)
sessionInfo()
px <- PXDataset("PXD002412")
px
?PXDataset
px <- PXDataset("PXD000001")
px
px <- PXDataset("PXD002004")
px
pxurl(px)
rpx:::apply_fix_issue_5(FALSE)
pxurl(px)
px
px
pxurl(px)
pxtax(px)
strwrap(pxref(px))
pxfiles(px)
strwrap(pxref(px))
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("BiocStyle")
setwd("~/Dropbox (Cambridge University)/phd/training/NGSdataProcessing/practicals")
4*2000000
6944898 * 4
